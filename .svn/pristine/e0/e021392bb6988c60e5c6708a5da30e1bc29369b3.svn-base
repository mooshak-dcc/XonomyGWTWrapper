package pt.up.fc.dcc.xonomygwt.client.wrapper;

import java.util.Arrays;
import java.util.logging.Logger;

import com.google.gwt.core.client.GWT;
import com.google.gwt.core.client.JavaScriptObject;
import com.google.gwt.core.client.ScriptInjector;
import com.google.gwt.resources.client.CssResource;
import com.google.gwt.resources.client.TextResource;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.ResizeComposite;
import com.google.gwt.user.client.ui.Widget;

import pt.up.fc.dcc.xonomygwt.client.resources.Resources;

/**
 * Main class of Xonomy GWT Wrapper
 * 
 * @author josepaiva
 */
public class XonomyGWTWrapper extends ResizeComposite {
	public static final String DEFAULT_EDITOR_ID = "editor";

	private static XonomyGWTWrapperUiBinder uiBinder = GWT.create(XonomyGWTWrapperUiBinder.class);

	interface XonomyGWTWrapperUiBinder extends UiBinder<Widget, XonomyGWTWrapper> {
	}

	interface BaseStyle extends CssResource {

		String hide();
	}

	private static final Logger LOGGER = Logger.getLogger("");

	@UiField
	static BaseStyle style;

	@UiField
	ResizeHtmlPanel base;

	private String id;

	public XonomyGWTWrapper() {
		this(DEFAULT_EDITOR_ID);
	}

	public XonomyGWTWrapper(String id) {

		initWidget(uiBinder.createAndBindUi(this));

		base.add(new HTML("<div id=\"" + id + "\"></div"));

		this.id = id;
	}

	@Override
	protected void onLoad() {
		super.onLoad();

		injectStyles();
		injectJavaScriptFiles();
	}

	/**
	 * Apply initial styles to player
	 */
	private void injectStyles() {

		for (CssResource cssResource : Arrays.asList(Resources.INSTANCE.xonomyCss(),
				Resources.INSTANCE.xonomyGwtCss())) {
			cssResource.ensureInjected();
		}
	}

	/**
	 * Inject JS files stored as resources in script elements of top window
	 */
	private void injectJavaScriptFiles() {

		for (TextResource textResource : Arrays.asList(Resources.INSTANCE.jqueryJs(), Resources.INSTANCE.xonomyJs(),
				Resources.INSTANCE.helperJs())) {
			ScriptInjector.fromString(textResource.getText()).setWindow(ScriptInjector.TOP_WINDOW).setRemoveTag(false)
					.inject();
		}
	}

	/**
	 * Get the language
	 * 
	 * @return language
	 */
	public static native String getLanguage() /*-{
		return $wnd.Xonomy.lang;
	}-*/;

	/**
	 * Set the language
	 * 
	 * @param lang
	 *            language to set
	 */
	public static native void setLanguage(String lang) /*-{
		$wnd.Xonomy.lang = lang;
	}-*/;

	/**
	 * Get the mode
	 * 
	 * @return mode
	 */
	public static native String getMode() /*-{
		return $wnd.Xonomy.mode;
	}-*/;

	/**
	 * Set the mode
	 * 
	 * @param mode
	 *            mode to set
	 */
	public static native void setMode(String mode) /*-{
		$wnd.Xonomy.setMode(mode);
	}-*/;

	/**
	 * Renders the contents of an editor
	 * @param data XML string
	 * @param editorId id of editor element
	 * @param docSpec valid JSON string document specification
	 */
	public static native void render(String data, String editorId, String docSpec) /*-{
		var editor = $doc.getElementById(editorId);
		$wnd.Xonomy.render(data, editor, JSON.parse(docSpec));
	}-*/;

	/**
	 * Renders the contents of an editor
	 * @param data Xonomy-compliant JavaScript object
	 * @param editorId id of editor element
	 * @param docSpec valid JSON string document specification
	 */
	public static native void render(JavaScriptObject data, String editorId, String docSpec) /*-{
		var editor = $doc.getElementById(editorId);
		$wnd.Xonomy.render(data, editor, JSON.parse(docSpec));
	}-*/;

	/**
	 * Refresh display
	 */
	public static native void refresh() /*-{
		$wnd.Xonomy.refresh();
	}-*/;

	/**
	 * Harvest the contents of an editor
	 * @return XML string of contents
	 */
	public static native String harvest() /*-{
		return $wnd.Xonomy.harvest();
	}-*/;

	/**
	 * Get text in selected language
	 * 
	 * @param text
	 *            a string of the form "lang: text_in_lang | lang: text_in_lang
	 *            | ..."
	 * @return text in selected language
	 */
	public static native String textByLang(String text) /*-{
		return $wnd.Xonomy.textByLang(text);
	}-*/;
}
